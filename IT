# Imminent Threat Security Process

## Table of Contents
- [Executive Summary](#executive-summary)
- [Quick Reference](#quick-reference)
- [What is an Imminent Threat?](#what-is-an-imminent-threat)
- [Identification Criteria](#identification-criteria)
- [Examples](#examples)
- [Scope](#scope)
- [Engineering Team Responsibilities](#engineering-team-responsibilities)
- [SLA Requirements](#sla-requirements)
- [What to Expect](#what-to-expect)
- [Process Flow](#process-flow)
- [Escalation Procedures](#escalation-procedures)
- [Tracking and Reporting](#tracking-and-reporting)
- [Common Pitfalls to Avoid](#common-pitfalls-to-avoid)
- [FAQ](#faq)
- [Glossary](#glossary)
- [Contact Information](#contact-information)

---

## Executive Summary

The **Imminent Threat Security Process** handles high-priority security findings that pose immediate risk to the organization. This process enables rapid detection, assessment, and resolution of critical vulnerabilities through collaboration between Security and Engineering teams.

> 🚨 **Priority Clarification**: While Imminent Threats are high priority, **security incidents** (active breaches, ongoing attacks) are the **highest priority** and are handled by SOC/SIRT through the incident response process, not this workflow.

**Key Points:**
- High Priority: Requires immediate attention and dedicated resources
- Collaborative Process: Security Architects and Engineering teams work together
- Defined Timelines: 72 hours for action plans, 14 days for remediation
- Comprehensive Tracking: Full visibility across all verticals and teams

---

## Quick Reference

**Immediate Actions Required:**

1. Acknowledge ticket assignment
2. Review finding details
3. Contact assigned Security Architect within 24 hours
4. Provide impact assessment within 72 hours
5. Submit action plan within 72 hours

**Timeline Requirements:**
- 24 hours: Initial contact with Security Architect
- 72 hours: Impact assessment and action plan due
- 14 days: Remediation complete

**Support:** Contact Security Architect or `#security-team` on Slack

---

## What is an Imminent Threat?

An **Imminent Threat** is a security finding that poses immediate risk to the organization and requires urgent attention. These are exploitable vulnerabilities that could result in security incidents if not addressed promptly.

> ⚠️ **IMPORTANT**: Imminent Threats are **NOT security incidents**. They are **preventive measures** to address vulnerabilities before they can be exploited. Do not treat them as active breaches or security incidents.

### Process Objectives

- Prevent security incidents through proactive vulnerability management
- Standardize response procedures for critical threats
- Establish clear ownership and accountability for security issues
- Enable structured collaboration between Security and Engineering teams

---

## Identification Criteria

A finding is classified as an **Imminent Threat** if it meets any of the following criteria:

| **Type** | **Criteria** |
|----------|--------------|
| **High-Severity Vulnerabilities** | CVSS ≥ 9.0 **AND** EPSS = HIGH/CRITICAL (0.65-1.0) **AND** Externally accessible **AND** Listed on CISA KEV |
| **Critical Wiz Toxic Combinations** | Specific high-risk combinations identified by Wiz security platform |
| **Penetration Test Findings** | High/Critical severity **AND** Existing services/infrastructure **AND** Documented risk/impact **AND** Working PoE available |
| **Security Advisories** | Manual tickets created for critical security advisories |
| **Bug Bounty Submissions** | Confirmed exploitable **AND** PoE and documented impact **AND** Manual ticket creation |
| **Verified Secrets in Code** | AWS Keys, Azure Keys, or other sensitive credentials **AND** Verified as active/exposed |

---

## Examples

| **Type** | **Finding** | **Details** | **Action** |
|----------|-------------|-------------|------------|
| **Critical Vulnerability** | Log4j vulnerability (CVE-2021-44228) on externally accessible web server | CVSS: 10.0, EPSS: 0.97, CISA KEV: Yes | Immediate patching required within 14 days |
| **Exposed Credentials** | AWS access keys found in public GitHub repository | Keys verified as active and have production access | Rotate keys immediately, implement secret scanning |
| **Penetration Test Finding** | SQL injection vulnerability in customer portal | Critical with working proof of exploit | Fix vulnerability and implement input validation |
| **Bug Bounty Submission** | Remote code execution in API endpoint | Confirmed exploitable with documented impact | Patch vulnerability and add security controls |

---

## Scope

| **In Scope** | **Out of Scope** |
|--------------|------------------|
| ✅ Automated Detection (Wiz dashboard, security tool alerts) | ❌ Routine Security Issues (standard vulnerability management) |
| ✅ Manual Detection (penetration test results, bug bounty submissions) | ❌ Low/Medium Severity (below CVSS/EPSS thresholds) |
| ✅ External Sources (security advisories, CISA KEV vulnerabilities) | ❌ Internal-Only Assets (systems not externally accessible) |
| ✅ Code Security (exposed secrets and credentials) | ❌ Non-Exploitable (findings without working proof of concept) |
| ✅ Infrastructure (externally accessible assets with critical vulnerabilities) | ❌ Security Incidents (active breaches handled by SOC/SIRT) |

> 🚨 **CRITICAL DISTINCTION**: If a finding is determined to be an **active security incident** (actual breach, ongoing attack, or confirmed exploitation), it will be escalated to SOC/SIRT and handled through the incident response process, NOT through this Imminent Threat process.

---

## Engineering Team Responsibilities

When assigned an Imminent Threat ticket, complete the following actions:

### 1. Initial Response (Within 72 Hours)
1. **Acknowledge** the ticket assignment.
2. **Review** the finding details and impact assessment.
3. **Engage** with the assigned Security Architect for context.
4. **Provide** detailed impact assessment including:
   - Business impact
   - Technical impact
   - Affected systems and users
   - Current mitigations in place

### 2. Action Plan Development (Within 72 Hours)
- **Collaborate** with the Security Architect to develop an action plan using one of these approaches:

**Option A: Remediation**
- Complete fix that eliminates the vulnerability
- This is what we prefer when it's technically feasible
- Must be implemented within 14 days

**Option B: Mitigating Controls**
- Temporary measures to reduce risk
- Must be implemented immediately for working PoE
- You still need a permanent fix within 14 days

**Option C: Exception**
- Formal request to accept the risk
- Requires GRC review and approval
- Must include business justification

**Option D: Risk Acceptance**
- Acknowledgment of risk with business approval
- Requires GRC review and approval
- Must include risk mitigation strategies

### **Progress Checklist**
- [ ] Ticket acknowledged
- [ ] Finding details reviewed
- [ ] Security Architect contacted (within 24 hours)
- [ ] Impact assessment completed (within 72 hours)
- [ ] Action plan developed and submitted (within 72 hours)
- [ ] Action plan approved by Security Architect
- [ ] Implementation started
- [ ] Regular progress updates provided
- [ ] Testing completed
- [ ] Evidence of completion provided
- [ ] Ticket closed by Security Architect


### 3. Implementation and Tracking
1. **Execute** the approved action plan.
2. **Update** the ticket regularly with progress.
3. **Communicate** any blockers or delays immediately.
4. **Provide** evidence of completion.

### 4. Collaboration Guidelines
- Contact the Security Architect immediately if questions arise.
- Provide all relevant technical details and context.
- Provide accurate timelines and resource estimates.
- Respond to requests within 24 hours.
- Work collaboratively with the Security Architect to develop the action plan.
- Be prepared to iterate on the action plan based on Security Architect feedback.

---

## SLA Requirements

| **Requirement** | **Without Working PoE** | **With Working PoE** |
|-----------------|-------------------------|----------------------|
| **Action Plan** | Required within 72 hours | Required within 72 hours (for permanent fix) |
| **Mitigating Controls** | N/A | Implement immediately |
| **Remediation** | Must be completed within 14 days | Permanent fix must be implemented within 14 days |
| **Escalation** | SVP of vertical if action plan not started within 72 hours | SVP of vertical if action plan not submitted within 72 hours |

**Escalation Timeline:**
- **72 Hours**: No action plan started → Escalation to SVP of vertical
- **14 Days**: No remediation completed → Continued tracking and reporting

---

## What to Expect

| **Timeline** | **What Happens** | **Your Role** |
|--------------|------------------|---------------|
| **Immediate** | Ticket created and assigned to Security Architect | Acknowledge ticket, review details |
| **Within 24 hours** | Security Architect contacts you | Respond with initial questions/concerns |
| **Within 72 hours** | Security Architect requests impact assessment and action plan | Provide detailed assessment, collaborate on action plan |
| **Within 14 days** | Implementation and tracking phase | Execute plan, provide regular updates |
| **Resolution** | Security Architect confirms fix and closes ticket | Provide evidence of completion |

---

## Process Flow

The Imminent Threat process follows these phases:

### 1. **Detection & Ticket Creation**
1. Finding gets identified (automatically or manually).
2. Ticket created in EIS Jira Project with proper labels.
3. Auto-assigned to Security Architect by vertical.

### 2. **Initial Assessment**
1. Security Architect performs quick threat modeling.
2. Security Architect may engage the engineering team to understand the context of the finding within the application/service.
3. **If it's an active security incident**: Escalated to SOC/SIRT (not handled here).
4. **If it's an imminent threat**: Continues with preventive action.

### 3. **Team Engagement & Planning**
1. Security Architect reaches out to affected team.
2. Team provides impact assessment and context.
3. Security Architect and team collaborate to develop action plan (remediation, mitigation, exception, or risk acceptance).
4. If action plan is not approved, team iterates on the plan through collaborative process.

### 4. **Review & Implementation**
1. Security Architect reviews and approves the plan.
2. Team implements the approved solution.
3. Security Architect tracks progress and confirms resolution.

### 5. **Closure**
1. Once resolved, Security Architect documents and closes the ticket.

> 🔍 **Key Decision Point**: The Security Architect determines if this is an active security incident (goes to SOC) or an imminent threat requiring preventive action (continues in this process).

---

## Escalation Procedures

| **Trigger** | **Timeline** | **Action** |
|-------------|--------------|------------|
| No action plan submitted | 72 hours | Escalation to SVP of vertical |
| No remediation completed | 14 days | Continued tracking and reporting |
| Repeated delays | Pattern of missed deadlines | Escalation to SVP of vertical |

**Escalation Path:**
1. Security Architect → Engineering Manager
2. Engineering Manager → Director/VP  
3. Director/VP → SVP of Vertical
4. SVP of Vertical → Executive Leadership

**Consequences:** Senior leadership involvement, additional resources may be assigned, other work may be deprioritized, all delays and reasons are tracked.

---

## Tracking and Reporting

**Jira Project:** EIS Imminent Threat  
**Labels:** `imminent-threat`, `source-[tool]`, `vertical-[team]`  
**Automation:** Auto-assignment by vertical/team

| **Tracking Type** | **Description** | **Action** |
|-------------------|-----------------|------------|
| **Tickets Above SLA** | Unresolved past 14-day remediation SLA | Reported by vertical, pod, and source system; flagged for immediate attention |
| **Tickets Without Action Plan Over SLA** | Lacking approved action plan after 72 hours | Tracked and highlighted by vertical, pod, and source system; immediate escalation required |
| **Source System Tracking** | Each ticket tagged with originating source system | Enables reporting and trend analysis by source (Wiz, Pentest, Bug Bounty, Security Advisory) |

**Reporting Schedule:**
- **Monthly**: Current status and SLA compliance
- **Quarterly**: Trends and recurring issues  
- **Yearly**: Comprehensive metrics and improvements

**Key Metrics:** Number of tickets created/resolved/closed, percentage resolved within SLA, percentage breaching SLA, trends by vertical/pod/source system.

---

## Common Pitfalls to Avoid

| **❌ Common Mistakes** | **✅ Best Practices** |
|------------------------|----------------------|
| Delaying action plan development until deadline approaches | Begin work immediately upon ticket assignment |
| Insufficient engagement with Security Architect | Maintain regular communication with Security Architect |
| Submitting incomplete action plans without proper impact assessment | Provide comprehensive impact assessments with business context |
| Insufficient testing and validation of fixes | Conduct thorough testing before marking as complete |
| Failing to communicate blockers and delays | Communicate proactively about issues or delays |
| Omitting rollback procedures | Maintain detailed documentation for audit and learning |
| Treating as routine bug rather than high-priority security issue | Seek clarification when uncertain |

---

## FAQ

### **Q: What if I disagree with the severity assessment?**
A: Contact the Security Architect immediately. Provide additional context and technical details. The assessment can be revised based on new information.

### **Q: Can I request an extension to the 14-day SLA?**
A: Extensions are possible but require strong business justification and approval from the Security Architect and Engineering Manager. Document the reasons clearly.

### **Q: What if the fix requires significant architectural changes?**
A: Work with the Security Architect to develop a phased approach. Temporary mitigations may be acceptable while implementing the permanent solution.
 
### **Q: How do I know if my finding qualifies as an Imminent Threat?**
A: The Security Architect will determine this during the initial assessment. If uncertain, err on the side of caution and contact Security.

### **Q: What is the difference between an Imminent Threat and a Security Incident?**
A: **Imminent Threats** are preventive measures for vulnerabilities that could be exploited. **Security Incidents** are active breaches, ongoing attacks, or confirmed exploitation. If an active incident is suspected, contact SOC/SIRT immediately - do not use this process.

### **Q: What happens if I miss the 72-hour action plan deadline?**
A: The ticket will be escalated to the SVP of vertical. It is critical to communicate any blockers immediately to avoid escalation.

### **Q: Can I work on multiple Imminent Threats simultaneously?**
A: Yes, but ensure adequate resources are available and communicate capacity constraints to the Security Architect early.

### **Q: What if the fix breaks something else?**
A: Implement proper testing and rollback procedures. If issues arise, communicate immediately with the Security Architect to adjust the approach.

### **Q: How do I provide evidence of completion?**
A: Include screenshots, logs, test results, or other documentation that demonstrates the vulnerability has been properly addressed.

---

## Glossary

| **Term** | **Definition** |
|----------|----------------|
| **CVSS** | Common Vulnerability Scoring System - Standardized framework for rating security vulnerability severity |
| **EPSS** | Exploit Prediction Scoring System - Machine learning model predicting vulnerability exploitation likelihood |
| **CISA KEV** | Cybersecurity and Infrastructure Security Agency Known Exploited Vulnerabilities catalog |
| **PoE** | Proof of Exploit - Evidence demonstrating a vulnerability can be successfully exploited |
| **SOC** | Security Operations Center - Team responsible for monitoring and responding to security incidents |
| **SIRT** | Security Incident Response Team - Team that handles active security incidents |
| **GRC** | Governance, Risk, and Compliance - Team handling risk acceptance and exception processes |
| **EIS** | Enterprise Information Security - Jira project where Imminent Threat tickets are created |

---

## Contact Information

### **🚨 Emergency Contacts**
| **Situation** | **Contact** | **Method** |
|---------------|-------------|------------|
| **Active Security Incident** | SOC/SIRT | Emergency hotline: [phone] |
| **Imminent Threat Questions** | Security Architect | Assigned automatically by vertical |
| **SLA Escalation** | SVP of Vertical | Via Security Architect |
| **General Security Questions** | Security Team | `#security-team` on Slack |

### **Regular Contacts**
- **Security Architects**: Assigned automatically by vertical
- **Security Team Slack**: `#security-team`
- **Security Email**: `security@company.com`
- **Engineering Manager**: Your direct manager
- **Security Director**: Available for complex issues

### **Additional Resources**
- **Security Documentation**: [Link to security wiki]
- **Vulnerability Management**: [Link to VM process]
- **Incident Response**: [Link to IR procedures]

---

## Important Reminders

> **Important**: This process is designed to protect the organization, not to assign blame. Security and Engineering teams work together to maintain security.

> **Critical**: Imminent Threats are **NOT security incidents**. They are preventive measures to address vulnerabilities before exploitation occurs.

> **Timeline**: Imminent threats require immediate attention. Do not delay in contacting the Security Architect.

> **Communication**: If blockers are encountered or additional resources are needed, communicate immediately rather than waiting for deadlines.

> **Documentation**: Maintain detailed records of actions, decisions, and progress for audit and learning purposes.

> **Process Distinction**: If an active security incident is discovered (breach, ongoing attack), contact SOC/SIRT immediately - do not use this Imminent Threat process.

---

*This page is maintained by the Security team. Last updated: [Current Date]*
